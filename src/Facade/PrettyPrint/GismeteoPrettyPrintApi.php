<?php

declare(strict_types=1);

namespace SakuraSamurai\Gismeteo\Facade\PrettyPrint;

use SakuraSamurai\Gismeteo\Exception\GismeteoException;
use SakuraSamurai\Gismeteo\Exception\InvalidArgumentException;
use SakuraSamurai\Gismeteo\Gismeteo;
use SakuraSamurai\Gismeteo\GismeteoInterface;
use SakuraSamurai\Gismeteo\Response\SearchResponse\SearchResponse;
use SakuraSamurai\Gismeteo\Response\WeatherResponse\WeatherResponse;

class GismeteoPrettyPrintApi implements GismeteoInterface
{
    private Gismeteo $gismeteo;

    public function __construct()
    {
        $this->gismeteo = new Gismeteo();
    }

    private function returnPrettyPrintedWeatherString(WeatherResponse $result): string
    {
        $precipitationIntensityInt = $result->precipitation->intensity;
        switch ($precipitationIntensityInt) {
            case 0:
                $precipitationIntensityString = '–ù–µ—Ç –æ—Å–∞–¥–∫–æ–≤';
                break;
            case 1:
                $precipitationIntensityString = '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å / —Å–Ω–µ–≥';
                break;
            case 2:
                $precipitationIntensityString = '–î–æ–∂–¥—å / —Å–Ω–µ–≥';
                break;
            case 3:
                $precipitationIntensityString = '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å / —Å–Ω–µ–≥';
                break;
            default:
                $precipitationIntensityString = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        }
        $precipitationTypeInt = $result->precipitation->type;
        switch ($precipitationTypeInt) {
            case 0: //
                $precipitationTypeString = '–ù–µ—Ç –æ—Å–∞–¥–∫–æ–≤‚òÄÔ∏è';
                break;
            case 1:
                $precipitationTypeString = '–î–æ–∂–¥—åüåß';
                break;
            case 2:
                $precipitationTypeString = '–°–Ω–µ–≥üå®';
                break;
            case 3:
                $precipitationTypeString = '–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏üå¶';
                break;
            default:
                $precipitationTypeString = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        }
        $precipitation =
            "- –¢–∏–ø: $precipitationTypeString \n" .
            "- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: $precipitationIntensityString \n" .
            "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {$result->precipitation->amount} –º–º. \n" .
            "- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {$result->precipitation->duration} \n";

        $geomagneticFieldInt = $result->geomagneticField;
        switch ($geomagneticFieldInt) {
            case 1:
                $geomagneticFieldString = '–ù–µ—Ç –∑–∞–º–µ—Ç–Ω—ã—Ö –≤–æ–∑–º—É—â–µ–Ω–∏–π';
                break;
            case 2:
                $geomagneticFieldString = '–ù–µ–±–æ–ª—å—à–∏–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è';
                break;
            case 3:
                $geomagneticFieldString = '–°–ª–∞–±–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è';
                break;
            case 4:
                $geomagneticFieldString = '–ú–∞–ª–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è';
                break;
            case 5:
                $geomagneticFieldString = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è';
                break;
            case 6:
                $geomagneticFieldString = '–°–∏–ª—å–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è';
                break;
            case 7:
                $geomagneticFieldString = '–ñ–µ—Å—Ç–∫–∏–π –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π —à—Ç–æ—Ä–º';
                break;
            case 8:
                $geomagneticFieldString = '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —à—Ç–æ—Ä–º';
                break;
            default:
                $geomagneticFieldString = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        $windDirectionScale_8Int = $result->wind->directionScale_8;
        switch ($windDirectionScale_8Int) {
            case 0:
                $windDirectionScale_8String = '–®—Ç–∏–ª—å';
                break;
            case 1:
                $windDirectionScale_8String = '–°–µ–≤–µ—Ä–Ω—ã–π';
                break;
            case 2:
                $windDirectionScale_8String = '–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π';
                break;
            case 3:
                $windDirectionScale_8String = '–í–æ—Å—Ç–æ—á–Ω—ã–π';
                break;
            case 4:
                $windDirectionScale_8String = '–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π';
                break;
            case 5:
                $windDirectionScale_8String = '–Æ–∂–Ω—ã–π';
                break;
            case 6:
                $windDirectionScale_8String = '–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π';
                break;
            case 7:
                $windDirectionScale_8String = '–ó–∞–ø–∞–¥–Ω—ã–π';
                break;
            case 8:
                $windDirectionScale_8String = '–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π';
                break;
            default:
                $windDirectionScale_8String = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        $wind =
            "- –°–∫–æ—Ä–æ—Å—Ç—å: {$result->wind->speedM_s} –º/—Å \n" .
            "- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: $windDirectionScale_8String \n";
        $cloudinessTypeInt = $result->cloudiness->type;
        switch ($cloudinessTypeInt) {
            case 0:
                $cloudinessTypeString = '–Ø—Å–Ω–æ‚òÄÔ∏è';
                break;
            case 1:
                $cloudinessTypeString = '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æüå§';
                break;
            case 2:
                $cloudinessTypeString = '–û–±–ª–∞—á–Ω–æüå•Ô∏è';
                break;
            case 3:
                $cloudinessTypeString = '–ü–∞—Å–º—É—Ä–Ω–æ‚òÅ';
                break;
            case 101:
                $cloudinessTypeString = '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—åüå§';
                break;
            default:
                $cloudinessTypeString = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        $cloudiness =
            "- –ü—Ä–æ—Ü–µ–Ω—Ç: {$result->cloudiness->percent} % \n" .
            "- –¢–∏–ø: $cloudinessTypeString \n";
        $kind = ($result->kind === 'Obs')
            ? '–ù–∞–±–ª—é–¥–µ–Ω–∏–µ' // True
            : (($result->kind === 'Frc')
                ? '–ü—Ä–æ–≥–Ω–æ–∑'
                : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø');

        $storm = $result->storm ? '–°–µ–π—á–∞—Å —à—Ç–æ—Ä–º!üß®' . "\n" : '';

        $temperature =
            "- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞(C): {$result->temperature->airC} ({$result->temperature->comfortC}) \n" .
            "- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã(C): {$result->temperature->waterC} \n";

        return (
            "–û—Å–∞–¥–∫–∏: \n $precipitation \n" .
            "–î–∞–≤–ª–µ–Ω–∏–µ: {$result->pressure->mm_hg_atm} –º–º.—Ä—Ç. —Å—Ç–æ–ª–±–∞ \n" .
            "–í–ª–∞–∂–Ω–æ—Å—Ç—å: {$result->humidity->percent} % \n" .
            "–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ: $geomagneticFieldString \n" .
            "–í–µ—Ç–µ—Ä: \n $wind \n" .
            "–û–±–ª–∞—á–Ω–æ—Å—Ç—å: \n $cloudiness \n" .
            "–î–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π: $result->measurementDate \n" .
            "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: $kind \n" .
            "$storm" .
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞(–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ '–ø–æ –æ—â—É—â–µ–Ω–∏—é'): \n $temperature \n" .
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: $result->fullDescription \n"
        );
    }

    /**
     * @throws GismeteoException
     */
    public function getCurrentWeatherByCoordinates(float $latitude, float $longitude): string
    {
        $result = $this->gismeteo->getCurrentWeatherByCoordinates($latitude, $longitude);
        return $this->returnPrettyPrintedWeatherString($result);
    }

    /**
     * @throws GismeteoException
     */
    public function getCurrentWeatherByGeographicObject(int $id): string
    {
        $result = $this->gismeteo->getCurrentWeatherByGeographicObject($id);
        return $this->returnPrettyPrintedWeatherString($result);
    }

    /**
     * @return string[]
     * @throws GismeteoException
     */
    public function getForecastDailyStepByCoordinates(float $latitude, float $longitude, int $days, int $step_count): array
    {
        $strings = [];
        $result = $this->gismeteo->getForecastDailyStepByCoordinates($latitude, $longitude, $days, $step_count);
        foreach ($result as $resultItem) {
            $strings[] = $this->returnPrettyPrintedWeatherString($resultItem);
        }

        return $strings;
    }

    /**
     * @return string[]
     * @throws InvalidArgumentException
     * @throws GismeteoException
     */
    public function getForecastDailyStepByGeographicObject(int $id, int $days, int $step_count): array
    {
        $result = $this->gismeteo->getForecastDailyStepByGeographicObject($id, $days, $step_count);
        $strings = [];
        foreach ($result as $resultItem) {
            $strings[] = $this->returnPrettyPrintedWeatherString($resultItem);
        }
        return $strings;
    }

    private function returnPrettyPrintedGeographicObject(SearchResponse $search): string
    {
        switch ($search->kind) {
            case'T':
                $kindValue = '–ì–æ—Ä–æ–¥';
                break;
            case'C':
                $kindValue = '–ú–µ–≥–∞–ø–æ–ª–∏—Å';
                break;
            case'A':
                $kindValue = '–ê—ç—Ä–æ–ø–æ—Ä—Ç';
                break;
            case'M':
                $kindValue = '–ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è';
                break;
            default:
                $kindValue = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        }
        $name = $search->name;
        $id = $search->id;
        $kind = $kindValue;
        $country = ($search->countryName === null ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : $search->countryName);
        $region = $search->districtName;
        $subRegion = $search->subDistrictName;

        return (
            "–ù–∞–∑–≤–∞–Ω–∏–µ: $name \n" .
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: $id \n" .
            "–¢–∏–ø –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: $kind \n" .
            "–°—Ç—Ä–∞–Ω–∞: $country \n" .
            "–†–µ–≥–∏–æ–Ω: $region \n" .
            "–ü–æ–¥—Ä–µ–≥–∏–æ–Ω: $subRegion \n"

        );
    }

    /**
     * @throws GismeteoException
     */
    public function searchGeographicObjectByCoordinates(float $latitude, float $longitude, int $limit): array
    {
        $result = $this->gismeteo->searchGeographicObjectByCoordinates($latitude, $longitude, $limit);
        $searchStrings = [];
        foreach ($result as $resultItem) {
            $searchStrings[] = $this->returnPrettyPrintedGeographicObject($resultItem);
        }

        return $searchStrings;
    }

    /**
     * @throws GismeteoException
     */
    public function searchGeographicObjectByIP(string $ip): array
    {
        $result = $this->gismeteo->searchGeographicObjectByIP($ip);
        $searchStrings = [];
        foreach ($result as $resultItem) {
            $searchStrings[] = $this->returnPrettyPrintedGeographicObject($resultItem);
        }

        return $searchStrings;
    }

    /**
     * @throws GismeteoException
     */
    public function searchGeographicObjectByQuery(string $query): array
    {
        $result = $this->gismeteo->searchGeographicObjectByQuery($query);
        $searchStrings = [];
        foreach ($result as $resultItem) {
            $searchStrings[] = $this->returnPrettyPrintedGeographicObject($resultItem);
        }

        return $searchStrings;
    }
}
